name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20.x'

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi

    - name: Run linter
      run: npm run lint

    - name: Build project
      run: npm run build

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Deploy via webhook
      run: |
        if [ -z "${{ secrets.DEPLOY_WEBHOOK_URL }}" ]; then
          echo "‚ö†Ô∏è DEPLOY_WEBHOOK_URL secret not set. Skipping deployment."
          echo "üîß To enable automatic deployment:"
          echo "1. Set DEPLOY_WEBHOOK_URL secret in repository settings"
          echo "2. Set DEPLOY_TOKEN secret for authentication"
          echo "3. Configure your production server to handle webhooks"
          exit 0
        fi
        
        echo "üöÄ Deploying to production..."
        curl -X POST "${{ secrets.DEPLOY_WEBHOOK_URL }}" \
          -H "Authorization: Bearer ${{ secrets.DEPLOY_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "ref": "${{ github.ref }}",
            "sha": "${{ github.sha }}",
            "repository": "${{ github.repository }}",
            "image": "ghcr.io/${{ github.repository }}:latest"
          }' && echo "‚úÖ Deployment webhook sent successfully" || {
            echo "‚ùå Deployment webhook failed"
            exit 1
          }
